From f055f2531c591b06b63ecae435481e2a8f94e86e Mon Sep 17 00:00:00 2001
From: George Beckstein <donbeckstein@live.com>
Date: Fri, 20 Dec 2019 14:57:22 -0500
Subject: [PATCH 15/17] =?UTF-8?q?Attmpted=20to=20fix=20astyle=20of=20I2CSl?=
 =?UTF-8?q?ave=20example=20=F0=9F=A4=9E?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 drivers/I2CSlave.h | 106 +++++++++++++++++++++++----------------------
 1 file changed, 54 insertions(+), 52 deletions(-)

diff --git a/drivers/I2CSlave.h b/drivers/I2CSlave.h
index 1920d39a0b..3087a23538 100644
--- a/drivers/I2CSlave.h
+++ b/drivers/I2CSlave.h
@@ -47,6 +47,8 @@ namespace mbed {
  *
  * #if BUILD_I2C_SLAVE
  *
+ * // Slave side of the example
+ *
  * #if !DEVICE_I2CSLAVE
  * #error [NOT_SUPPORTED] I2C Slave is not supported
  * #endif
@@ -55,68 +57,68 @@ namespace mbed {
  *
  * int main() {
  *
- * 	char buf[BUFFER_SIZE] = "ABCDE";
- *
- * 	slave.address(SLAVE_ADDR);
- * 	while (1) {
- * 		int i = slave.receive();
- * 		switch (i) {
- * 			case I2CSlave::ReadAddressed:
- * 			// Write back the buffer from the master
- * 			slave.write(buf, BUFFER_SIZE);
- * 			printf("Written to master (addressed): %s\n", buf);
- * 			break;
- * 			case I2CSlave::WriteGeneral:
- * 			slave.read(buf, BUFFER_SIZE);
- * 			printf("Read from master (general): %s\n", buf);
- * 			break;
- * 			case I2CSlave::WriteAddressed:
- * 			slave.read(buf, BUFFER_SIZE);
- * 			printf("Read from master (addressed): %s\n", buf);
- * 			break;
- * 		}
- * 	 }
+ *     char buf[BUFFER_SIZE] = "ABCDE";
+ *
+ *     slave.address(SLAVE_ADDR);
+ *     while (1) {
+ *         int i = slave.receive();
+ *         switch (i) {
+ *             case I2CSlave::ReadAddressed:
+ *                 // Write back the buffer from the master
+ *                 slave.write(buf, BUFFER_SIZE);
+ *                 printf("Written to master (addressed): %s\n", buf);
+ *                 break;
+ *
+ *             case I2CSlave::WriteGeneral:
+ *                 slave.read(buf, BUFFER_SIZE);
+ *                 printf("Read from master (general): %s\n", buf);
+ *                 break;
+ *
+ *             case I2CSlave::WriteAddressed:
+ *                 slave.read(buf, BUFFER_SIZE);
+ *                 printf("Read from master (addressed): %s\n", buf);
+ *                 break;
+ *         }
+ *     }
  * }
  *
  * #else
  *
- *
+ * // Master side of the example
  *
  * I2C master(p3, p4);
  *
  * static const char* to_send[] = { "abcde", "12345", "EFGHI" };
  *
  * int main() {
- *
- * 	char buf[BUFFER_SIZE];
- * 	int send_index = 0;
-
- * 	while (1) {
- * 		strcpy(buf, to_send[send_index]);
- *
- * 		// Write the new message to the buffer
- * 		if (master.write(SLAVE_ADDR, buf, BUFFER_SIZE)) {
- * 			printf("Failed to write to slave!\n");
- * 		} else {
- * 			printf("Written to slave: %s\n", buf);
- * 		}
- *
- * 		// Read what the slave has (should be identical)
- * 		if (master.read(SLAVE_ADDR, buf, BUFFER_SIZE)) {
- * 			printf("Failed to read from slave!\n");
- * 		} else {
- * 			printf("Read from slave: %s\n", buf);
- * 		}
- *
- * 		// Change the message we're writing to the slave
- * 		send_index++;
- * 		if (send_index > 2) {
- * 			send_index = 0;
- * 		}
- *
- * 		wait_us(500000); // Wait 0.5s
- *
- * 	}
+ *     char buf[BUFFER_SIZE];
+ *     int send_index = 0;
+ *
+ *     while (1) {
+ *         strcpy(buf, to_send[send_index]);
+ *
+ *         // Write the new message to the slave
+ *         if (master.write(SLAVE_ADDR, buf, BUFFER_SIZE)) {
+ *             printf("Failed to write to slave!\n");
+ *         } else {
+ *             printf("Written to slave: %s\n", buf);
+ *         }
+ *
+ *         // Read what the slave has (should be identical)
+ *         if (master.read(SLAVE_ADDR, buf, BUFFER_SIZE)) {
+ *             printf("Failed to read from slave!\n");
+ *         } else {
+ *             printf("Read from slave: %s\n", buf);
+ *         }
+ *
+ *         // Change the message we're writing to the slave
+ *         send_index++;
+ *         if (send_index > 2) {
+ *             send_index = 0;
+ *         }
+ *
+ *         wait_us(500000); // Wait 0.5s
+ *     }
  * }
  *
  * #endif
-- 
2.29.2

